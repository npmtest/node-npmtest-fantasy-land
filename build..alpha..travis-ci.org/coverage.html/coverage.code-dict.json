{"/home/travis/build/npmtest/node-npmtest-fantasy-land/test.js":"/* istanbul instrument in package npmtest_fantasy_land */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/lib.npmtest_fantasy_land.js":"/* istanbul instrument in package npmtest_fantasy_land */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fantasy_land = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fantasy_land = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fantasy-land && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fantasy_land */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fantasy_land\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fantasy_land.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fantasy_land.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fantasy_land.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fantasy_land.__dirname + '/lib.npmtest_fantasy_land.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/index.js":"(function() {\n\n  'use strict';\n\n  /* eslint comma-dangle: [\"off\"], no-var: [\"off\"], strict: [\"error\", \"function\"] */\n  /* global self */\n\n  var mapping = {\n    equals: 'fantasy-land/equals',\n    lte: 'fantasy-land/lte',\n    concat: 'fantasy-land/concat',\n    empty: 'fantasy-land/empty',\n    map: 'fantasy-land/map',\n    contramap: 'fantasy-land/contramap',\n    ap: 'fantasy-land/ap',\n    of: 'fantasy-land/of',\n    alt: 'fantasy-land/alt',\n    zero: 'fantasy-land/zero',\n    reduce: 'fantasy-land/reduce',\n    traverse: 'fantasy-land/traverse',\n    chain: 'fantasy-land/chain',\n    chainRec: 'fantasy-land/chainRec',\n    extend: 'fantasy-land/extend',\n    extract: 'fantasy-land/extract',\n    bimap: 'fantasy-land/bimap',\n    promap: 'fantasy-land/promap'\n  };\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = mapping;\n  } else {\n    self.FantasyLand = mapping;\n  }\n\n}());\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/internal/compose.js":"'use strict';\n\nconst {tagged} = require('daggy');\n\nconst fl = require('..');\nconst {equality} = require('./func');\n\nconst Compose = module.exports = tagged('c');\nCompose[fl.of] = Compose;\nCompose.prototype[fl.ap] = function(f) {\n  return Compose(this.c[fl.ap](f.c[fl.map](u => y => y[fl.ap](u))));\n};\nCompose.prototype[fl.map] = function(f) {\n  return Compose(this.c[fl.map](y => y[fl.map](f)));\n};\nCompose.prototype[fl.equals] = function(x) {\n  return equality(this.c, x.c);\n};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/internal/func.js":"'use strict';\n\nconst fl = require('../');\nconst equality = (x, y) => typeof x[fl.equals] === 'function' ? x[fl.equals](y) : x === y;\nconst lte = (x, y) => {\n  if (typeof y[fl.lte] === 'function') return y[fl.lte](x);\n\n  const typeX = typeof x;\n  const typeY = typeof y;\n  return typeX === typeY && (typeX === 'string' || typeX === 'number') && x <= y;\n};\n\nmodule.exports = {\n  equality,\n  lte,\n};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/internal/id.js":"'use strict';\n\nconst fl = require('../');\nconst {equality, lte} = require('./func');\n\nconst {tagged} = require('daggy');\n\nconst Id = module.exports = tagged('value');\n\n// Setoid\nId.prototype[fl.equals] = function(b) {\n  return equality(this.value, b.value);\n};\n\n// Ord\nId.prototype[fl.lte] = function(b) {\n  return lte(this.value, b.value);\n};\n\n// Semigroup (value must also be a Semigroup)\nId.prototype[fl.concat] = function(b) {\n  return new Id(this.value[fl.concat](b.value));\n};\n\n// Monoid is not satisfiable since the type lacks a universal empty value\n\n// Foldable\nId.prototype[fl.reduce] = function(f, acc) {\n  return f(acc, this.value);\n};\n\nId.prototype.toArray = function() {\n  return [this.value];\n};\n\n// Functor\nId.prototype[fl.map] = function(f) {\n  return new Id(f(this.value));\n};\n\n// Apply\nId.prototype[fl.ap] = function(b) {\n  return new Id(b.value(this.value));\n};\n\n// Traversable\nId.prototype[fl.traverse] = function(typeRep, f) {\n  // the typeRep argument is only provided for types where map might fail.\n  return f(this.value)[fl.map](Id[fl.of]);\n};\n\n// Chain\nId.prototype[fl.chain] = function(f) {\n  return f(this.value);\n};\n\n// ChainRec\nId[fl.chainRec] = function(f, i) {\n  const next = v => ({done: false, value: v});\n  const done = v => ({done: true, value: v});\n  let state = {done: false, value: i};\n  while (state.done === false) {\n    state = f(next, done, state.value).value;\n  }\n  return new Id(state.value);\n};\n\n// Extend\nId.prototype[fl.extend] = function(f) {\n  return new Id(f(this));\n};\n\n// Applicative\nId[fl.of] = function(a) {\n  return new Id(a);\n};\n\n// Comonad\nId.prototype[fl.extract] = function() {\n  return this.value;\n};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/internal/patch.js":"'use strict';\n\nconst fl = require('..');\n\nmodule.exports = () => {\n  String.prototype[fl.concat] = String.prototype.concat;\n  Array.prototype[fl.equals] = function(y) {\n    return this.length === y.length && this.join('') === y.join('');\n  };\n  Array.prototype[fl.map] = function(f) {\n    return this.map(x => f(x));\n  };\n  Array.prototype[fl.ap] = function(fs) {\n    return fs[fl.chain](f => this.map(f));\n  };\n  Array.prototype[fl.chain] = function(f) {\n    return [].concat(this.map(f));\n  };\n  Array.prototype[fl.reduce] = function(f, x) {\n    return this.reduce((x, y) => f(x, y), x);\n  };\n  Array.prototype[fl.concat] = Array.prototype.concat;\n  Array.prototype[fl.traverse] = function(typeRep, f) {\n    return this[fl.map](f)[fl.reduce](\n      (ys, x) => ys[fl.ap](x[fl.map](y => z => z[fl.concat](y))),\n      typeRep[fl.of]([])\n    );\n  };\n  Array.prototype[fl.alt] = function(b) {\n    return this.concat(b);\n  };\n  Array[fl.zero] = () => [];\n};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/internal/string_sum.js":"'use strict';\n\nconst {tagged} = require('daggy');\n\nconst fl = require('..');\nconst {equality} = require('./func');\n\n// Special type of sum for the type of string.\nconst Sum = module.exports = tagged('v');\nSum[fl.of] = Sum;\nSum[fl.empty] = () => Sum('');\nSum.prototype[fl.map] = function(f) {\n  return Sum(f(this.v));\n};\nSum.prototype[fl.concat] = function(x) {\n  return Sum(this.v + x.v);\n};\nSum.prototype[fl.equals] = function(x) {\n  return equality(this.v, x.v);\n};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/alt.js":"'use strict';\n\nconst {alt, map} = require('..');\n\n/**\n\n### Alt\n\n1. `a.alt(b).alt(c)` is equivalent to `a.alt(b.alt(c))` (associativity)\n2. `a.alt(b).map(f)` is equivalent to `a.map(f).alt(b.map(f))` (distributivity)\n\n**/\n\nconst associativity = eq => a => b => c => eq(\n  a[alt](b)[alt](c),\n  a[alt](b[alt](c))\n);\n\nconst distributivity = eq => a => b => f => eq(\n  a[alt](b)[map](f),\n  a[map](f)[alt](b[map](f))\n);\n\nmodule.exports = {associativity, distributivity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/alternative.js":"'use strict';\n\nconst {alt, zero, ap} = require('..');\n\n/**\n\n### Alternative\n\n1. `x.ap(f.alt(g))` is equivalent to `x.ap(f).alt(x.ap(g))` (distributivity)\n1. `x.ap(M.zero())` is equivalent to `M.zero()` (annihilation)\n\n**/\n\nconst distributivity = eq => x => f => g => eq(\n  x[ap](f[alt](g)),\n  x[ap](f)[alt](x[ap](g))\n);\n\nconst annihilation = T => eq => x => eq(\n  x[ap](T[zero]()),\n  T[zero]()\n);\n\nmodule.exports = {distributivity, annihilation};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/applicative.js":"'use strict';\n\nconst {identity, thrush} = require('fantasy-combinators');\nconst {of, ap} = require('..');\n\n/**\n\n### Applicative\n\n1. `v.ap(A.of(x => x))` is equivalent to `v` (identity)\n2. `A.of(x).ap(A.of(f))` is equivalent to `A.of(f(x))` (homomorphism)\n3. `A.of(y).ap(u)` is equivalent to `u.ap(A.of(f => f(y)))` (interchange)\n\n**/\n\nconst identityʹ = T => eq => x => {\n  const a = T[of](x)[ap](T[of](identity));\n  const b = T[of](x);\n  return eq(a, b);\n};\n\nconst homomorphism = T => eq => x => {\n  const a = T[of](x)[ap](T[of](identity));\n  const b = T[of](identity(x));\n  return eq(a, b);\n};\n\nconst interchange = T => eq => x => {\n  const u = T[of](identity);\n\n  const a = T[of](x)[ap](u);\n  const b = u[ap](T[of](thrush(x)));\n  return eq(a, b);\n};\n\nmodule.exports = {identity: identityʹ, homomorphism, interchange};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/apply.js":"'use strict';\n\nconst {identity, compose} = require('fantasy-combinators');\nconst {of, map, ap} = require('..');\n\n/**\n\n### Apply\n\n1. `v.ap(u.ap(a.map(f => g => x => f(g(x)))))` is equivalent to `v.ap(u).ap(a)` (composition)\n\n**/\n\nconst composition = t => eq => x => {\n  const y = t[of](identity);\n\n  const a = y[ap](y[ap](y[map](compose)));\n  const b = y[ap](y)[ap](y);\n  return eq(a, b);\n};\n\nmodule.exports = {composition};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/bifunctor.js":"'use strict';\n\nconst {identity, compose} = require('fantasy-combinators');\nconst {bimap} = require('..');\n\n/**\n### Bifunctor\n\n1. `p.bimap(a =>, b => b)` is equivalent to `p` (identity)\n2. `p.bimap(compose(f1)(f2), compose(g1)(g2))` is equivalent to `p.bimap(f1, g1).bimap(f2, g2)` (composition)\n\n**/\n\nconst identityʹ = t => eq => x => {\n  const a = t(x)[bimap](identity, identity);\n  const b = t(x);\n  return eq(a, b);\n};\n\nconst composition = t => eq => x => {\n  const a = t(x)[bimap](compose(identity)(identity), compose(identity)(identity));\n  const b = t(x)[bimap](identity, identity)[bimap](identity, identity);\n  return eq(a, b);\n};\n\nmodule.exports = {identity: identityʹ, composition};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/chain.js":"'use strict';\n\nconst {of, chain} = require('..');\n\n/**\n\n### Chain\n\n1. `m.chain(f).chain(g)` is equivalent to `m.chain(x => f(x).chain(g))` (associativity)\n\n**/\n\nconst associativity = t => eq => x => {\n  const a = t[of](x)[chain](t[of])[chain](t[of]);\n  const b = t[of](x)[chain](x => t[of](x)[chain](t[of]));\n  return eq(a, b);\n};\n\nmodule.exports = {associativity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/chainrec.js":"'use strict';\n\nconst {chain, map, chainRec} = require('..');\n\n/**\n\n### ChainRec\n\n1. `M.chainRec((next, done, v) => p(v) ? d(v).map(done) : n(v).map(next), i)`\n   is equivalent to\n   `(function step(v) { return p(v) ? d(v) : n(v).chain(step); }(i))`\n   (equivalence)\n**/\n\nconst equivalence = T => eq => p => d => n => x => {\n  const a = T[chainRec]((next, done, v) => p(v) ? d(v)[map](done) : n(v)[map](next), x);\n  const b = (function step(v) { return p(v) ? d(v) : n(v)[chain](step); }(x));\n  return eq(a, b);\n};\n\nmodule.exports = {equivalence};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/comonad.js":"'use strict';\n\nconst {identity} = require('fantasy-combinators');\nconst {extend, extract} = require('..');\n\n/**\n\n### Comonad\n\n1. `w.extend(_w => _w.extract())` is equivalent to `w`\n2. `w.extend(f).extract()` is equivalent to `f(w)`\n\n**/\n\nconst leftIdentity = t => eq => x => {\n  const a = t(x)[extend](identity)[extract]();\n  const b = t(x);\n  return eq(a, b);\n};\n\nconst rightIdentity = t => eq => x => {\n  const a = t(x)[extend](w => w[extract]());\n  const b = t(x);\n  return eq(a, b);\n};\n\nmodule.exports = {leftIdentity, rightIdentity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/contravariant.js":"'use strict';\n\nconst {identity, compose} = require('fantasy-combinators');\nconst {contramap} = require('..');\n\n/*\n\n### Contravariant Functor\n\n1. `u.contramap(a => a)` is equivalent to `u` (identity)\n2. `u.contramap(x => f(g(x)))` is equivalent to `u.contramap(f).contramap(g)` (composition)\n\n*/\n\nconst identityʹ = t => eq => x => {\n  const a = t(x)[contramap](identity);\n  const b = t(x);\n  return eq(a, b);\n};\n\nconst composition = t => eq => x => {\n  const a = t(x)[contramap](compose(identity)(identity));\n  const b = t(x)[contramap](identity)[contramap](identity);\n  return eq(a, b);\n};\n\nmodule.exports = {identity: identityʹ, composition};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/extend.js":"'use strict';\n\nconst {identity} = require('fantasy-combinators');\nconst {extend} = require('..');\n\n/**\n\n### Extend\n\n1. `w.extend(g).extend(f)` is equivalent to `w.extend(_w => f(_w.extend(g)))`\n\n**/\n\nconst associativity = t => eq => x => {\n  const a = t(x)[extend](identity)[extend](identity);\n  const b = t(x)[extend](w => identity(w[extend](identity)));\n  return eq(a, b);\n};\n\nmodule.exports = {associativity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/foldable.js":"'use strict';\n\nconst {identity} = require('fantasy-combinators');\nconst {reduce} = require('..');\n\n/**\n\n### Foldable\n\n1. `u.reduce` is equivalent to `u.toArray().reduce`\n\n**/\n\nconst associativity = t => eq => x => {\n  const a = t(x)[reduce](identity, x);\n  const b = t(x).toArray()[reduce](identity, x);\n  return eq(a, b);\n};\n\nmodule.exports = {associativity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/functor.js":"'use strict';\n\nconst {map} = require('..');\n\n/**\n\n### Functor\n\n1. `u.map(a => a)` is equivalent to `u` (identity)\n2. `u.map(x => f(g(x)))` is equivalent to `u.map(g).map(f)` (composition)\n\n**/\n\nconst identity = of => eq => x => {\n  const a = of(x)[map](x => x);\n  const b = of(x);\n  return eq(a, b);\n};\n\nconst composition = of => eq => f => g => x => {\n  const a = of(x)[map](x => f(g(x)));\n  const b = of(x)[map](g)[map](f);\n  return eq(a, b);\n};\n\nmodule.exports = {identity, composition};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/monad.js":"'use strict';\n\nconst {of, chain} = require('..');\n\n/**\n\n### Monad\n\n1. `M.of(a).chain(f)` is equivalent to `f(a)` (left identity)\n2. `m.chain(M.of)` is equivalent to `m` (right identity)\n\n**/\n\nconst leftIdentity = t => eq => f => x => {\n  const a = t[of](x)[chain](f);\n  const b = f(x);\n  return eq(a, b);\n};\n\nconst rightIdentity = t => eq => x => {\n  const a = t[of](x)[chain](t[of]);\n  const b = t[of](x);\n  return eq(a, b);\n};\n\nmodule.exports = {leftIdentity, rightIdentity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/monoid.js":"'use strict';\n\nconst {of, empty, concat} = require('..');\n\n/**\n\n### Monoid\n\n1. `m.concat(M.empty())` is equivalent to `m` (right identity)\n2. `M.empty().concat(m)` is equivalent to `m` (left identity)\n\n**/\n\nconst rightIdentity = T => eq => x => {\n  const a = T[of](x)[concat](T[empty]());\n  const b = T[of](x);\n  return eq(a, b);\n};\n\nconst leftIdentity = T => eq => x => {\n  const a = T[empty]()[concat](T[of](x));\n  const b = T[of](x);\n  return eq(a, b);\n};\n\nmodule.exports = {rightIdentity, leftIdentity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/ord.js":"'use strict';\n\nconst {lte, equals} = require('..');\n\n/**\n   ### Ord\n\n   1. `a.lte(b)` or `b.lte(a)` (totality)\n   2. If `a.lte(b)` and `b.lte(a)`, then `a.equals(b)` (antisymmetry)\n   3. If `a.lte(b)` and `b.lte(c)`, then `a.lte(c)` (transitivity)\n\n**/\n\nconst totality = eq => f => g => {\n  const a = f[lte](g);\n  const b = g[lte](f);\n  const c = true;\n  return eq(a || b, c);\n};\n\nconst antisymmetry = eq => f => g => {\n  const a = f[lte](g);\n  const b = g[lte](f);\n  const c = f[equals](g);\n  const d = true;\n  return eq(a, d) && eq(b, d) && eq(c, d);\n};\n\nconst transitivity = eq => f => g => h => {\n  const a = f[lte](g);\n  const b = g[lte](h);\n  const c = f[lte](h);\n  const d = true;\n  return eq(a, d) && eq(b, d) && eq(c, d);\n};\n\nmodule.exports = {totality, antisymmetry, transitivity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/plus.js":"'use strict';\n\nconst {zero, alt, map} = require('..');\n\n/**\n\n### Alt\n\n1. `x.alt(A.zero())` is equivalent to `x` (right identity)\n2. `A.zero().alt(x)` is equivalent to `x` (left identity)\n2. `A.zero().map(f)` is equivalent to `A.zero()` (annihilation)\n\n**/\n\nconst rightIdentity = T => eq => x => eq(\n  T[zero]()[alt](x),\n  x\n);\n\nconst leftIdentity = T => eq => x => eq(\n  x[alt](T[zero]()),\n  x\n);\n\nconst annihilation = T => eq => f => eq(\n  T[zero]()[map](f),\n  T[zero]()\n);\n\nmodule.exports = {rightIdentity, leftIdentity, annihilation};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/profunctor.js":"'use strict';\n\nconst {identity, compose} = require('fantasy-combinators');\nconst {promap} = require('..');\n\n/**\n### Profunctor\n\n1. `p.promap(a => a, b => b)` is equivalent to `p` (identity)\n2. `p.promap(compose(f1)(f2), compose(g1)(g2))` is equivalent to `p.promap(f1, g1).promap(f2, g2)` (composition)\n\n**/\n\nconst identityʹ = t => eq => x => {\n  const a = t(x)[promap](identity, identity);\n  const b = t(x);\n  return eq(a, b);\n};\n\nconst composition = t => eq => x => {\n  const a = t(x)[promap](compose(identity)(identity), compose(identity)(identity));\n  const b = t(x)[promap](identity, identity)[promap](identity, identity);\n  return eq(a, b);\n};\n\nmodule.exports = {identity: identityʹ, composition};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/semigroup.js":"'use strict';\n\nconst {concat} = require('..');\n\n/**\n\n### Semigroup\n\n1. `a.concat(b).concat(c)` is equivalent to `a.concat(b.concat(c))` (associativity)\n\n**/\n\nconst associativity = t => eq => x => {\n  const f = t(x);\n  const g = t(x);\n  const h = t(x);\n\n  const a = f[concat](g)[concat](h);\n  const b = f[concat](g[concat](h));\n  return eq(a, b);\n};\n\nmodule.exports = {associativity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/setoid.js":"'use strict';\n\nconst {equals} = require('..');\n\n/**\n\n### Setoid\n\n1. `a.equals(a) === true` (reflexivity)\n2. `a.equals(b) === b.equals(a)` (symmetry)\n3. If `a.equals(b)` and `b.equals(c)`, then `a.equals(c)` (transitivity)\n\n**/\n\nconst reflexivity = t => eq => x => {\n  const y = t(x);\n\n  const a = y[equals](y);\n  const b = true;\n  return eq(a, b);\n};\n\nconst symmetry = t => eq => x => {\n  const f = t(x);\n  const g = t(x);\n\n  const a = f[equals](g);\n  const b = g[equals](f);\n  return eq(a, b);\n};\n\nconst transitivity = t => eq => x => {\n  const f = t(x);\n  const g = t(x);\n  const h = t(x);\n\n  const a = f[equals](g);\n  const b = g[equals](h);\n  const c = f[equals](h);\n  return eq(a && b, c);\n};\n\nmodule.exports = {reflexivity, symmetry, transitivity};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/laws/traversable.js":"'use strict';\n\nconst {Id, Compose} = require('../internal');\nconst {identity} = require('fantasy-combinators');\nconst {of, traverse, map} = require('..');\n\n/**\n\n### Traversable\n\n1. `t(u.traverse(F, x => x))` is equivalent to `u.traverse(G, t)` for any\n   `t` such that `t(a).map(f)` is equivalent to `t(a.map(f))` (naturality)\n\n2. `u.traverse(F, F.of)` is equivalent to `F.of(u)` for any Applicative `F`\n   (identity)\n\n3. `u.traverse(Compose, x => new Compose(x))` is equivalent to\n   `new Compose(u.traverse(F, x => x).map(x => x.traverse(G, x => x)))` for\n   `Compose` defined below and any Applicatives `F` and `G` (composition)\n\n**/\n\nconst naturality = T => t => eq => x => {\n  const a = identity(t(x)[traverse](T, y => y));\n  const b = t(x)[traverse](T, identity);\n  return eq(a, b);\n};\n\nconst identityʹ = T => eq => x => {\n  const u = [x];\n\n  const a = u[traverse](T, T[of]);\n  const b = T[of](u);\n  return eq(a, b);\n};\n\nconst composition = T => t => eq => x => {\n  const a = t(x)[traverse](Compose, Compose);\n  const b = Compose(t(x)[traverse](Id, y => y)[map](x => x[traverse](Id, y => y)));\n  return eq(a, b);\n};\n\nmodule.exports = {naturality, identity: identityʹ, composition};\n","/home/travis/build/npmtest/node-npmtest-fantasy-land/node_modules/fantasy-land/internal/index.js":"'use strict';\n\nconst patch = require('./patch');\nconst Id = require('./id');\nconst Sum = require('./string_sum');\nconst Compose = require('./compose');\nconst {equality} = require('./func');\n\nmodule.exports = {\n  Id,\n  Sum,\n  Compose,\n  equality,\n  patch,\n};\n"}